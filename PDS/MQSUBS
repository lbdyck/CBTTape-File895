/* REXX *************************************************************/
/********************************************************************/
/* REXX to list active MQ subsystems on the LPAR.                   */
/* written by R. Nowak in 2015                                      */
/* This REXX based on an article from                               */
/* Antonio Luis Salcedo Freidel                                     */
/* Xephon - DB2 update #124 February 2003                           */
/* page 22ff: ISPF dialog to obtain a list of DB2 subsystems        */
/* The ERLY control block is not documented, so use is of own       */
/* risk.                                                            */
/********************************************************************/
/********************************************************************/
/* Build a list of active MQ subsystems.                            */
/********************************************************************/
Numeric Digits 256                  /* this must be at top of REXX. */
CVTADDR = Get_Stor('10'x)      /* get communications vector address */
SYSID = Strip(Get_Stor(CVTADDR,'154'x,8)) /* get MVS system id.     */
d1 = 'Active MQ Systems on 'SYSID' :'
say d1
/*------------------------------------------------------------------*/
/* Traverse the list of subsystems known to JES.                    */
/* JESCT = CVT+x'128' = Pointer to the JESCT                        */
/* JESCT points to first SSCT which chains to next SSCT             */
/*------------------------------------------------------------------*/
JCTADDR = Get_Stor(CVTADDR,'128'x)   /* JES job control table block */
SSCTADDR = Get_Stor(JCTADDR,24)      /* Address of first SSCT block */
DO WHILE C2D(SSCTADDR) <> 0
   /*---------------------------------------------------------------*/
   /* get information from the SSCT control block.                  */
   /*---------------------------------------------------------------*/
   SUBSYS = Get_Stor(SSCTADDR,'8'x)      /* get the Subsystem name. */
   ERLYADDR= Get_Stor(SSCTADDR,20)       /* get ERLY block address. */
   /*---------------------------------------------------------------*/
   /* get information from the ERLY control block.                  */
   /*---------------------------------------------------------------*/
   ERLYEYEC= Get_Stor(ERLYADDR,4)   /* get literal ERLY eye catcher */
   ERLYMODN= Get_Stor(ERLYADDR,84,8) /*get name of module associated*/
   STCNAME= Get_Stor(ERLYADDR,12,8)  /*get name of master proc      */
   CMDPREF= Get_Stor(ERLYADDR,102,8) /*get name of command prefix ??*/
   CSQ3SSI1= Get_Stor(ERLYADDR,28)       /* get CSQ3SSI1   address. */
                                    /* SCSQAUTH(CSQ3SSGP) offset 28 */
   /*---------------------------------------------------------------*/
   /* verify that it is an ERLY block and it is for MQ.             */
   /*---------------------------------------------------------------*/
   if ERLYEYEC = 'ERLY' & ERLYMODN = 'CSQ3EPX ' THEN DO
      /*------------------------------------------------------------*/
      /* If the CSQ3SSI1 address is zeroes, then MQ  is not active. */
      /*------------------------------------------------------------*/
      if (C2D(CSQ3SSI1) = 0) then do
         NOP
      end
      else do
         d1 = ' SubSysID: '||SUBSYS||'  MasterProc: '||STCNAME
         d1 = d1||'  CMD-Prefix: '||STRIP(CMDPREF,'T','00'x)
         say d1
         d1 = ' '
         say d1
      end
   end
   /*---------------------------------------------------------------*/
   /* get address of next SSCT control block in the chain.          */
   /* if the address is not zeroes, then there is another SSCT.     */
   /*---------------------------------------------------------------*/
   SSCTADDR = Get_Stor(SSCTADDR,'4'x)          /* Next one in chain */
END
exit
/* ================================================================ */
Get_Stor: PROCEDURE
/*------------------------------------------------------------------*/
/* This procedure will extract data using the MVS Storage           */
/* REXX function. Input arguments will be:                          */
/* 1) Storage_Pointer or Literal, ie CVTPTR or '10'x, or 16 (like   */
/*    '10'x)                                                        */
/* 2) Offset in hex or dec (number), ie 'FF'x or 256 or D2C(256)    */
/* 3) Length of returned data in decimal, ie 256                    */
/* NOTE : ensure that a 'NUMERIC DIGITS 256' is at                  */
/* the beginning of the calling REXX program.                       */
/*------------------------------------------------------------------*/
Parse Arg AREA,OFFSET,LENG
If Arg(2,'O') Then OFFSET=0
If Arg(3,'O') Then LENG=4
If DataType(AREA) = 'CHAR' Then AREA = C2D(AREA)
If DataType(OFFSET) = 'CHAR' Then OFFSET = C2D(OFFSET)
Return Storage((D2X(AREA+OFFSET)),LENG)
/* ================================================================ */
