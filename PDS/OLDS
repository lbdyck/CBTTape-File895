/* REXX **************************************************************/
/* OLDS                                                              */
/* List LogSequenceNumber errors in IMS OLDS.                        */
/*                                                                   */
/* Rainer Nowak                                                      */
/*                                                                   */
/* For length of date/time and LSN have a look at:                   */
/* IMS.SDFSMAC(DFSLOGRC)                                             */
/* logrc_suffix          DSECT                                       */
/*********************************************************************/
ARG dsn
dsn= STRIP(dsn,'B',"'")
IF dsn = '' | dsn = 'DSN' THEN DO
   SAY 'You have to name the dataset:'
   pull dsn
   dsn = strip(dsn)
   dsn= STRIP(dsn,'B',"'")
END
NUMERIC DIGITS 20                            /* allow up to 2**64    */
leap_seconds = 0
"ALLOC DD(FROG) UNIT(VIO) DSORG(PS) LRECL(80) BLKSIZE(644)",
           "SPACE(10,1) TRACKS  RECFM(V,B) NEW"
"ALLOC DD(IN) DA('"dsn"') SHR"
SAY 'SLOW REXX WORKING'
t1= COPIES('=',72)
eof = 'no'
err = 0
i = 0
"NEWSTACK"
DO while eof ='no'
   "EXECIO 1 DISKR IN"
   if rc = 2 then do
      eof ='yes'
      "EXECIO 0 DISKR  IN (FINIS"
   end
   else do
      PARSE       PULL pgmz
      i = i + 1
      if i = 1 then do
         lsnc = RIGHT(pgmz,8)
         lsnx = C2X(lsnc)
         lsnd = X2D(lsnx)
         oldlsn = lsnx
         expected = lsnd + 1
         expectedx = D2X(expected,16)
         d1= 'First record'
         dummy2 = Sachma('FROG',d1)
         tl = RIGHT(pgmz,16)
         ti = LEFT(tl,8)
         dt = STCKE(ti)
         d1= 'Date/Time (GMT): 'dt'   LSN: 'lsnx
         dummy2 = Sachma('FROG',d1)
      end
      else do
         lsnc = RIGHT(pgmz,8)
         lsnx = C2X(lsnc)
         lsnd = X2D(lsnx)
         if lsnd <> expected then do
            err = err + 1
            dummy2 = Sachma('FROG',t1)
            d1= 'Record with LSN error'
            dummy2 = Sachma('FROG',d1)
            d1= 'Record number:    'i
            dummy2 = Sachma('FROG',d1)
            tl = RIGHT(pgmz,16)
            ti = LEFT(tl,8)
            dt = STCKE(ti)
            d1= 'Date/Time (GMT): 'dt
            dummy2 = Sachma('FROG',d1)
            d1= 'prev. LSN: 'oldlsn
            dummy2 = Sachma('FROG',d1)
            d1= 'act. LSN : 'lsnx
            dummy2 = Sachma('FROG',d1)
            d1= 'expected : 'expectedx
            dummy2 = Sachma('FROG',d1)
            dummy2 = Sachhex('FROG',pgmz)
            SAY 'ERROR: 'err' in record 'i
            if err >= 5 then do
               eof = 'yes'
               d1= 'Abend after 5 errors|'
               dummy2 = Sachma('FROG',d1)
            end
         end
         oldlsn = lsnx
         expected = expected + 1
         expectedx = D2X(expected,16)
      end
   END
END
dummy2 = Sachma('FROG',t1)
d1= 'Last record'
dummy2 = Sachma('FROG',d1)
tl = RIGHT(pgmz,16)
ti = LEFT(tl,8)
dt = STCKE(ti)
d1= 'Date/Time (GMT): 'dt'   LSN: 'lsnx
dummy2 = Sachma('FROG',d1)
if err = 0 then a = 'No ' ; else a = err||' '
d1= a||'errors in 'i' records'
dummy2 = Sachma('FROG',d1)
"DELSTACK"
"FREE FILE(IN)"
"EXECIO 0 DISKW FROG (FINIS"
"ISPEXEC  LMINIT DATAID(ID) DDNAME(FROG)"
"ISPEXEC  EDIT DATAID("ID")"
"FREE DD(FROG)"
exit

/*-------------------------------------------------------------------*/
/* *********** Subroutines ***************************************** */
/*-------------------------------------------------------------------*/
/*-------------------------------------------------------------------*/
/* Sachma - Output in dataset                                        */
/*-------------------------------------------------------------------*/
Sachma: PROCEDURE
parse arg dd,text
iorec = 0
tr = text
do while LENGTH(tr) > 72
   ta = LEFT(tr,72)
   tr = SUBSTR(tr,73)
   push ta
   Address TSO "EXECIO 1 DISKW" DD "("
   iorec = max(rc,iorec)
end
push tr
Address TSO "EXECIO 1 DISKW" DD "("
iorec = max(rc,iorec)
RETURN iorec
/*-------------------------------------------------------------------*/
/* Sachhex - Hex output in dataset                                   */
/*-------------------------------------------------------------------*/
Sachhex: PROCEDURE
parse arg dd,txt
iorec = 0
tr = txt
do while LENGTH(tr) > 72
   ta = LEFT(tr,72)
   tr = SUBSTR(tr,73)
   d1='' ; d2='' ; d3='' ; lentxt = LENGTH(ta)
   tz= COPIES('-',LENGTH(ta))
   DO j = 1 to lentxt
      tchar= SUBSTR(ta,j,1)
      xtchar = c2x(tchar)
      d1= d1||tchar
      d2= d2||LEFT(xtchar,1)
      d3= d3||RIGHT(xtchar,1)
   END
   push tz
   push d3
   push d2
   push d1
   Address TSO "EXECIO 4 DISKW" dd "("
   iorec = max(rc,iorec)
end
d1='' ; d2='' ; d3='' ; lentxt = LENGTH(tr)
tz= COPIES('-',LENGTH(tr))
DO j = 1 to lentxt
   tchar= SUBSTR(tr,j,1)
   xtchar = c2x(tchar)
   d1= d1||tchar
   d2= d2||LEFT(xtchar,1)
   d3= d3||RIGHT(xtchar,1)
END
push tz
push d3
push d2
push d1
Address TSO "EXECIO 4 DISKW" dd "("
iorec = max(rc,iorec)
RETURN iorec
STCKE: PROCEDURE EXPOSE leap_seconds
/* Convert date and time from STCK format.                          */
/* Bit position 51 of the clock is incremented every millisecond    */
PARSE ARG s_time
S=c2x(s_time)
S = X2D(LEFT(S,13))
sek = s % 1000000
msek = s // 1000000
erg = S2DTE(sek)'.'msek
RETURN erg

S2DTE:
PROCEDURE EXPOSE leap_seconds
  /* Function                                                  */
  /* Convert whole number of seconds until 1.1.1900 to date    */
  /* and time. STCK time                                       */
ARG ss
ss = TRUNC(ss) - leap_seconds
minu = ss%60
sek = RIGHT(ss//60,2,'0')
stdu = minu%60
tagu = stdu%24
std = RIGHT(stdu//24,2,'0')
minu = RIGHT(minu//60,2,'0')
tag = RIGHT(DATE('N',tagu+DATE('B','19000101','S'),'B'),11,'0')
erg = tag" "STD":"MINU":"SEK
RETURN erg

