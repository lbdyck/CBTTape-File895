/* REXX **************************************************************/
/* CICSSUBS                                                          */
/* Find all running CICS systems on this LPAR                        */
/* Rainer Nowak, 2015                                                */
/*********************************************************************/
numeric digits 10
/* init variables                                                    */
cicsprog = 'DFHSIP'              /* CICS Main program                */
ascb. = 'NO'
apf. = ''
apf.0 = 0
enq. = ''
panz = 0
ascb_output = 'NO'

/* main program                                                      */
CALL find_ascb                         /* search all running jobs    */
CALL search_apf                        /* search all APF datasets    */
IF apf.0 = 0 THEN DO
   SAY 'No APF-datasets with 'cicsprog' found.'
   EXIT(8)
END
CALL find_enqueue              /* any enqueues on this datasets?     */
SAY 'Possible active CICS SDFHAUTH datasets'
SAY '======================================'
SAY ' '
SAY 'System: 'MVSVAR('SYSNAME')
SAY ' '
DO i = 1 TO apf.0
   SAY 'Dataset: 'apf.i
   SAY 'Version: 'cics_ver(apf.i)
   if enq.i.0 = 0 then do
      SAY '   No Jobs/STCs found'
      SAY ' '
   end
   else do
    SAY '   Jobname  S/J Stepname Procstep UserID'
    DO j = 1 TO enq.i.0
     job = enq.i.j.1
     if ascb.job.1 = 'YES' then do
      SAY '   'job' 'ascb.job.3' 'ascb.job.4' 'ascb.job.5' 'ascb.job.6
     end
    END
    SAY enq.i.89.3
    SAY  ' '
   end
END
IF panz > 0 THEN DO
  SAY "Following datasets can't be checked for "cicsprog" because"
  SAY "you don't have READ permission:"
  DO i = 1 TO panz
     SAY p_noRead.i
  END
  SAY ' '
END
IF ascb_output = 'YES' THEN DO
  SAY 'More ENQUEUES than can displayed, so here are all ASCB:'
  SAY ' '
  SAY '   Jobname  S/J Stepname Procstep UserID'
  DO i = 1 TO p_ascb.0
     SAY p_ascb.i
  END
END
EXIT

/* Subroutines                                                       */
find_ascb:
CVT    = STORAGE(10,4)                         /* ADDR CVT           */
DCVT   = C2D(CVT)                              /* CONVERT TO DECIMAL */
DASVT  = PTR(DCVT+556,4)                       /* ADDR ASVT          */
ASCNT  = PTR(DASVT+516,4)                      /* ADDR ASCBCNT       */
aanz = 0
DO I     = 1 TO ASCNT
   ASCB  = STORAGE(C2X(D2C(DASVT+524+I*4)),4)  /* ADDR ASCB FROM ASVT*/
   IF   ABBREV(C2X(ASCB),'80')  = 1            /* IS IT VALID?       */
        THEN ITERATE                           /* NO, LEAVE FOR NEXT */
   ELSE IF   STORAGE(C2X(ASCB),4) /= 'ASCB'    /* IS IT ALLOCATED?   */
             THEN ITERATE                      /* NO, LEAVE FOR NEXT */
   DASCB = C2D(ASCB)                           /* CONVERT TO DECIMAL */
   TSB   = STG(DASCB+60,4)                     /* LOAD TSB ADDRESS   */
   IF    TSB /= '00000000'X  THEN              /* ANY ADDR IN THERE  */
         TYPE = 'TSO'                          /* YES, ITS A TSO     */
   ELSE  TYPE = 'STC'                          /* NO, ASSUME STC     */
   UID   = STG(DASCB+172,4)                    /* LOAD ASCBJOBI ADDR */
   IF    C2X(UID) = 00000000 THEN              /* IS THERE AN ADDR?  */
         UID = STG(DASCB+176,4)                /* NO, MUST BE A STC  */
   ELSE  TYPE = 'JOB'                          /* YES, MAKE TYPE JOB */
   UID   = STORAGE(C2X(UID),8)                 /* GET JOB/STC NAME   */
   DCSCB = PTR(DASCB+X2D(38),4)                /* LOAD CSCB ADDRESS  */
   STEPN = STG(DCSCB+16,8)                     /* GET STEP NAME      */
   PROCN = STG(dcscb+32,8)                     /* GET PROCSTEP NAME  */
   DOUCB = PTR(DASCB+X2D(90),4)                /* LOAD CSCB ADDRESS  */
   USER  = STG(doucb+208,8)
   if ascb.UID.1 = 'YES' then do
      ascb.UID.2 = ascb.UID.2 + 1
   end
   else do
      ascb.UID.1 = 'YES'                       /* Job exist          */
      ascb.UID.2 = 1                           /* how often exist job*/
      ascb.UID.3 = TYPE                        /* STC/TSO/JOB        */
      ascb.UID.4 = STEPN                       /* STEPNAME           */
      ascb.UID.5 = PROCN                       /* PROCSTEP NAME      */
      ascb.UID.6 = USER                        /* USERID             */
      aanz = aanz + 1
      p_ascb.aanz = '   'UID' 'TYPE' 'STEPN' 'PROCN' 'USER
   end
   p_ascb.0 = aanz
END
RETURN
search_apf:
ADDRESS TSO
pref = SYSVAR(SYSPREF)
"profile noprefix"
CTR = 0
CVT    = STORAGE(10,4)
DCVT   = C2D(CVT)
ADDR1  = STG(DCVT+484,4)
CADDR1 = C2X(ADDR1)
IF CADDR1 = 7FFFF001 THEN DO
   CVT = STORAGE(10,4)                /* POINT TO CVT                */
   CVTADR   = C2X(STORAGE(10,4))      /* CONVERT OFFSET 16 TO HEX    */
   CVTDEC   = X2D(CVTADR)             /* DECMALIZE PTR               */
   CVTDEC   = CVTDEC - 29             /* GET ADDRESS OF CVT PREFIX   */
   CVTPFX   = D2X(CVTDEC,8)           /* CONVERT TO HEX              */
   CVTPROD  = STORAGE(CVTPFX,4)       /* EBCDIC FORMAT OF SP LEVEL   */
   CVTECVT  = 140             /* X'008C' - OFFSET INTO CVT FOR ECVT  */
   ECVTCSVT  = 228            /* X'00E4' - OFFSET INTO ECVT FOR CSVT */
   CSVTAPFA = 12              /* X'000C' - OFFSET INTO CSVT FOR APFA */
   APFAAPHT = 8               /* X'0009' - OFFSET INTO APFA FOR APHT */
   ECVT = STORAGE(D2X(C2D(CVT)+CVTECVT),4)          /* POINT TO ECVT */
   CSVT = STORAGE(D2X(C2D(ECVT)+ECVTCSVT),4)        /* POINT TO CSVT */
   APFA = STORAGE(D2X(C2D(CSVT)+CSVTAPFA),4)        /* POINT TO APFA */
   APHT = STORAGE(D2X(C2D(APFA)+APFAAPHT),4)        /* POINT TO APHT */
   DO WHILE APHTNEXT Â¬= ('00000000'X)
      I = ctr + 1
      CKSMS = STORAGE(D2X(C2D(APHT)+4),1)
      IF  BITAND(CKSMS,'80'x) = '80'x THEN DO      /*  SMS dataset ? */
         VOL.I = '*SMS* '                          /* SMS control    */
      END
      ELSE DO
         VOL.I = STORAGE(D2X(C2D(APHT)+68),6)      /* PRINT VOLSER   */
      END
      DSN.I = STORAGE(D2X(C2D(APHT)+24),44)        /* GET DSN        */
      APHTNEXT = STORAGE(D2X(C2D(APHT)+8),4)    /* POINT TO NEXT APHT*/
      APHT     = APHTNEXT                       /* REFERENCE NEW ONE */
      CTR      = CTR + 1                        /* ADD TO COUNTER    */
      PARSE UPPER VAR VOL.I VOL.I ' '
      PARSE UPPER VAR DSN.I DSN.I ' '
      if SUBSTR(DSN.I,2) = 'YS1.LINKLIB' then DSN.I = 'SYS1.LINKLIB'
      IF APHTNEXT = ('00000000'X) THEN DO
         VOL.0 = ctr
         DSN.0 = ctr
      END
   END
END
ELSE DO
   DATA   = STORAGE(CADDR1,2)
   NUMENT = SUBSTR(DATA,1,2)
   DNUMENT = C2D(NUMENT)
   LEN    = (DNUMENT * 51) + 2
   DATA   = STORAGE(CADDR1,LEN)
   START  = 3
   DO I = 1 TO DNUMENT
      LEN = SUBSTR(DATA,START,1)
      DLEN1 = C2D(LEN)
      DLEN2 = DLEN1 - 6
      VOL.I = SUBSTR(DATA,START+1,6)
      DSN.I = SUBSTR(DATA,START+7,DLEN2)
      START = START + 1 + DLEN1
      PARSE UPPER VAR VOL.I VOL.I ' '
      PARSE UPPER VAR DSN.I DSN.I ' '
      if SUBSTR(DSN.I,2) = 'YS1.LINKLIB' then DSN.I = 'SYS1.LINKLIB'
   END
   VOL.0 = DNUMENT
   DSN.0 = DNUMENT
END
do i = 1 to DSN.0
   APFDSN = DSN.i
   IF llq(APFDSN) = 'SDFHAUTH' THEN DO
      msgval = MSG('OFF')
      retcode = LISTDSI("'"APFDSN"' SMSINFO NORECALL")
      msgval = MSG(msgval)
      IF sysreason = 9 THEN DO   /* dataset migrated   */
         NOP
      END
      ELSE DO
         anz = apf.0
         anz = anz + 1
         apf.0 = anz
         apf.anz = APFDSN
      END
   END
end
ADDRESS TSO
if pref = '' then "profile noprefix"
else "profile prefix("pref")"
RETURN
find_enqueue:
ADDRESS ISPEXEC
"CONTROL ERRORS CANCEL"
do i = 1 to apf.0
   eqdsn = apf.i
   eqdsn = STRIP(''eqdsn'',,"'")
   major = '*'
   minor = eqdsn
   "QUERYENQ TABLE(WUECENQ) QNAME(MAJOR) RNAME(MINOR)"
   qrc = RC
   tbl = 'WUECENQ'
   IF qrc < 5 THEN DO
      ADDRESS ISPEXEC
      'TBTOP' tbl
      IF rc>0 THEN DO
         ZEDLMSG="TBTOP failed for table" tbl "RC="rc
         "ISPEXEC SETMSG MSG(ISRZ001)"
         EXIT 8
      END
      rows=0                                       /* Init counters */
      DO FOREVER
        'TBSKIP' tbl                               /* NEXT ROW      */
        IF rc>0 THEN LEAVE
        'TBGET' tbl                                /* SET VARIABLES */
        IF rc>0 THEN LEAVE
        rows=rows+1                                /* count rows    */
        enq.i.0 = rows
        enq.i.rows.1 = LEFT(ZENJOB,8,' ')
        enq.i.rows.2 = ZENSYST
      END
      'TBEND' tbl
   END
   IF qrc = 8 | qrc = 10 THEN DO             /* No ENQ held         */
      enq.i.0 = 0
   END
   IF qrc = 4 THEN DO              /* Too many enqueues             */
      enq.i.89.3 = 'More ENQUEUES exist.'
      ascb_output = 'YES'
   END
end
RETURN
cics_ver:
arg dsn
ADDRESS TSO
pref = SYSVAR(SYSPREF)
"profile noprefix"
ver = '???'
retcode = LISTDSI("'"dsn"' SMSINFO NORECALL")
"ispexec DSINFO DATASET('"dsn"')"
aa = RACAUTH(dsn,'READ')
IF aa = 1 THEN DO
   cc = 0                /* Returncode                            */
   l. = 0
   in. = ''
   IDLIB=''
   "ISPEXEC LMINIT DATAID(IDLIB) DATASET('"dsn"')"
   "ISPEXEC LMOPEN DATAID("IDLIB")"
   "ISPEXEC LMMFIND DATAID("IDLIB") MEMBER("cicsprog") STATS(NO)"
   cmdLMGET="ISPEXEC LMGET DATAID("IDLIB") MODE(INVAR) DATALOC(EXEREC)",
            "DATALEN(EXELEN) MAXLEN(32760)"
   rcLMGET=0
   vi=0
   do while rcLMGET=0
       cmdLMGET; rcLMGET=rc
       if rcLMGET=0 then do
        vi=vi+1
        in.vi=exerec
        l.vi=exelen
       end
     if rcLMGET>=8 /*eof*/ then cmdLMGET
   end
   in.0=vi
   "ISPEXEC LMCLOSE DATAID("IDLIB")"
   "ISPEXEC LMFREE DATAID("IDLIB")"
   IF ZDSDSNT <> 'LIBRARY' THEN DO
      DO j= 1 TO in.0
         IF LEFT(in.j,8) = '*DFHCICS' THEN DO
            ver = SUBSTR(in.j,14,4)' = 'SUBSTR(in.j,78,12)
            j = in.0 + 1
         END
      END
   END
   ELSE DO  /* read first 100 chars of program in a program object  */
     l = LENGTH(in.1)       /* length of row, normaly 4096          */
     eyecatcher = SUBSTR(in.1,1,8)
     IF eyecatcher = 'IEWPLMH ' THEN DO
        /* Offset of PMAR:                                          */
        opmar = x2d(c2x(SUBSTR(in.1,53,4)))
        /* Offset of program entry in PMAR:                         */
        opment = opmar + 44
        zs = O2ZS(opment,l)
        z = WORD(zs,1) + 0
        s = WORD(zs,2) + 0
        oentry = x2d(c2x(SUBSTR(in.z,s,4)))
        zs = O2ZS(oentry,l)
        z = WORD(zs,1) + 0
        s = WORD(zs,2) + 0
        if l - s >= 99 then do
           pganf = SUBSTR(in.z,s,100)
        end
        else do
           rl = (l - s) +1
           pganf = SUBSTR(in.z,s,rl)
           zr = z +1
           pganf = pganf||SUBSTR(in.zr,1,100-rl)
        end
        ver = SUBSTR(pganf,14,4)' = 'SUBSTR(pganf,78,12)
     END
     ELSE DO
        ver = '???'
     END
   END
END
ELSE DO
   ver = '???'
END
ADDRESS TSO
if pref = '' then "profile noprefix"
else "profile prefix("pref")"
RETURN ver
/*-------------------------------------------------------------*/
PTR: RETURN C2D(STORAGE(D2X(ARG(1)),ARG(2)))
/*-------------------------------------------------------------*/
STG: RETURN STORAGE(D2X(ARG(1)),ARG(2))
/*-------------------------------------------------------------*/
/* ================================================================= */
LLQ: PROCEDURE
ARG dsn
dsn = STRIP(dsn,'B',' ')
llq = SUBSTR(dsn,LASTPOS('.',dsn)+1)
RETURN llq
/* O2ZS   - calculate row (z) and column (s) from offset            */
O2ZS: PROCEDURE
ARG offset,l
z = offset % l
z = z + 1
s = offset // l
s = s + 1
RETURN z' 's

/********************************************************************/
RACAUTH: PROCEDURE
ARG dsn,wacc
w = POS(wacc,'NONE READ UPDATE CONTROL ALTER')
IF w = 0 THEN DO
   SAY 'WRONG PARM IN RACAUTH: 'wacc
   EXIT 8
END
dsn = "'"dsn"'"
x=OUTTRAP("ldsn.")
ADDRESS TSO "LISTDSD DATASET("dsn") GENERIC ALL"
x=OUTTRAP("OFF")
acc = 'NONE'
IF LEFT(ldsn.15,11) = 'YOUR ACCESS' THEN DO
   acc = WORD(ldsn.17,1)
END
ELSE DO
   do i=1 to ldsn.0
      IF LEFT(ldsn.i,11) = 'YOUR ACCESS' THEN DO
         j = i + 2
         acc = WORD(ldsn.j,1)
         i = ldsn.0 + 1
      END
   end
END
h = POS(acc,'NONE READ UPDATE CONTROL ALTER')
IF h >= w THEN erg = 1
ELSE erg = 0
RETURN erg
/********************************************************************/
