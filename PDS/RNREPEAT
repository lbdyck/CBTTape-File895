/* REXX *************************************************************/
/* RNREPEAT -           EDIT MACRO.                                 */
/* ISPF Edit macro                                                  */
/* Kind of a serial letter. In the text to which the Edit Macro     */
/* is applied, parts of them become one line                        */
/* ÄrepeatÜ                                                         */
/* put in front and a line                                          */
/* Ä/repeatÜ                                                        */
/* is placed in the back, repeated as often and with variables      */
/* as specified in the file that is sent as a parm. The variables   */
/* are indicated in the text with Ävariable nameÜ.                  */
/* The file that contains the variables must be unnumbered.         */
/* In the first line the variable names are given separeted by      */
/* semicolons. In the following lines specify the variable values   */
/* (also separated by semicolons (;)).                              */
/*                                                                  */
/* Example variable file:                                           */
/* name;firstName                                                   */
/* heisenberg;werner                                                */
/* einstein;albert                                                  */
/*                                                                  */
/* Example text:                                                    */
/* This line just once.                                             */
/* ÄrepeatÜ                                                         */
/* ÄfirstNameÜ ÄnameÜ was a physicist.                              */
/* This line twice.                                                 */
/* Ä/repeatÜ                                                        */
/*                                                                  */
/********************************************************************/
/* trace r  */
ADDRESS ISPEXEC
"ISREDIT MACRO (DSN)"
IF dsn = '' THEN DO                    /* Panel for DSN input        */
   CALL Init                           /* find Panel DSN             */
   "ISPEXEC LIBDEF ISPPLIB DATASET ID('"RN_Panel"') STACK"
   "ISPEXEC DISPLAY PANEL(RNREPEAP)"
   "ISPEXEC VGET (RNREPDSN) PROFILE"
   "ISPEXEC LIBDEF ISPPLIB "
   dsn = RNREPDSN
END
dsn = STRIP(dsn,"B","'")
ka = '63'x                              /* Ä                         */
kz = 'FC'x                              /* Ü                         */
anf = ka||'REPEAT'||kz
eor = ka||'/REPEAT'||kz
"ISREDIT CURSOR = .ZLAST"
"ISREDIT (zeile,spalte) = CURSOR"
"ISREDIT CAPS OFF"
/* put whole text in z_inhalt.                                      */
z_inhalt.0 = zeile
DO j = 1 TO z_inhalt.0
   "ISREDIT (text) = LINE "j" "
   z_inhalt.j = text
END
/* read dataset with variables                                      */
ADDRESS TSO "ALLOC F(DDIN) DATASET('"dsn"') SHR"
IF RC > 0 THEN DO
   SAY 'Error with ALLOC| RC='RC
   EXIT
END
ADDRESS TSO "EXECIO * DISKR DDIN (STEM vari. FINIS"
ADDRESS TSO "FREE F(DDIN)"
/* Test if dataset of variables is numbert                          */
r = WORD(vari.1,WORDS(vari.1))
If LENGTH(r) = 8 & DATATYPE(r) = 'NUM' THEN DO
   SAY 'Dataset with variables has line numbers| CHANGE it|'
   EXIT
END
/* read names of variables   -> varna.                              */
rest = vari.1
PARSE VAR rest varn ';' rest
varna.1 = STRIP(TRANSLATE(varn),'B',' ')
varna.0 = 1
l = 2
DO WHILE rest <> ''
   PARSE VAR rest varn ';' rest
   varna.l = STRIP(TRANSLATE(varn),'B',' ')
   varna.0 = l
   l = l + 1
END
/* read value of variables -> V_Variablenname.                      */
DO m = 2 TO vari.0
   rest = vari.m
   DO n = 1 TO varna.0
      INTERPRET "PARSE VAR rest V_"varna.n".m ';' rest"
      INTERPRET "V_"varna.n".m = STRIP(V_"varna.n".m,'B',' ')"
   END
END
/* delete text and write new                                        */
k = 0
j = 1
"ISREDIT EXCLUDE ALL"
"ISREDIT DELETE ALL X"
DO WHILE j <= z_inhalt.0
   repeat = 'NO'
   DO WHILE repeat = 'NO' & j <= z_inhalt.0
      IF POS(anf,TRANSLATE(z_inhalt.j)) > 0 THEN DO
         repeat = 'YES'
         ra = j + 1
      END
      ELSE DO
         newline = z_inhalt.j
         'ISREDIT LINE_AFTER 'k' = (newline)'
         j = j + 1
         k = k + 1
      END
   END
   IF j <= z_inhalt.0 THEN DO
      j = j + 1
      DO WHILE repeat = 'YES' & j <= z_inhalt.0
         IF POS(eor,TRANSLATE(z_inhalt.j)) > 0 THEN DO
            repeat = 'NO'
            re = j - 1
            j = j + 1
         END
         ELSE DO
            j = j + 1
         END
      END
      IF repeat = 'YES' THEN DO
         repeat = 'NO'
         re = j - 1
      END
      o = 0
      DO l = ra TO re
         o = o + 1
         Z_rep.o = z_inhalt.l
         Z_rep.0 = o
      END
      DO m = 2 TO vari.0
        DO o = 1 TO Z_rep.0
           zw = Z_rep.o
           DO WHILE POS(ka,zw) > 0
              a = POS(ka,zw)
              b = POS(kz,zw)
              v = TRANSLATE(SUBSTR(zw,a+1,b-a-1))
              INTERPRET "zw = LEFT(zw,a-1)||V_"v".m||SUBSTR(zw,b+1)"
           END
           newline = zw
           'ISREDIT LINE_AFTER 'k' = (newline)'
           k = k + 1
        END
      END
   END
END
"ISREDIT CURSOR = .ZFIRST"
EXIT

/* ================================================================= */
/* === Procedures ================================================== */
/* ================================================================= */
/* === Init ======================================================== */
Init:
parse source . . ProcName my_proc my_dsn rest
/* Init the general variables                                        */
IF my_dsn <> '?' THEN DO
   libs = my_dsn
END
ELSE DO
   IF my_proc <> '?' THEN DO
      dummy = WUESDD(my_proc)
      IF WORDS(dummy) > 0 THEN DO
       j = WORDS(dummy)
       i = 1
       DO WHILE i <= j
        d1=STRIP(WORD(dummy,i),"B","'")
        Y = SYSDSN("'"d1"("ProcName")'")
        IF Y = 'OK' THEN DO
           libs = d1
           i = j + 1
        END
        i = i + 1
       END
       IF i = j + 1 THEN libs = 'this dataset'
      END
      ELSE DO
       libs = 'this dataset'
      END
   END
   ELSE DO
      libs = 'this dataset'
   END
END
RN_Panel = libs
RETURN
/* ================================================================= */
/*********************************************************************/
/* WUESDD                                                            */
/* DESCRIPTION:                                                      */
/*    Function to return the current available datasets under the    */
/*    given DD-name, incl. LIBDEFed datasets.                        */
/* AUTHOR : R. Nowak                                                 */
/*********************************************************************/
WUESDD: PROCEDURE
ARG DDName
IF DDName = '' THEN DO
   SAY 'Wrong call of WUESDD. DD='DDName
   EXIT 8
END
libd = check_DD(DDName)
/* if libd = 1 (ddname is libdef-able) then user-dd has to be searched
first, then libdef and at last the dd allocation, else only dd
allocation has to be searched.                                       */
SELECT  /* libd                                                      */
  WHEN libd = 0 THEN DO
   DSN_List = DD_DSNs(DDName)
  END
  WHEN libd = 1 THEN DO
   SELECT
      WHEN DDName = 'ISPFILE' THEN usrdd = 'ISPFILU'
      WHEN DDName = 'ISPTABL' THEN usrdd = 'ISPTABU'
      OTHERWISE DO
         usrdd = LEFT(DDName,4)||'USR'
      END
   END    /* SELECT                                                 */
   DSN_List = DD_DSNs(usrdd)
   TYPvar = ''
   IDvar = ''
   /* QLIBDEF get RC=0 if LIBDEF-datsets exist and are stored in    */
   /* var ID, RC=4 : no LIBDEF                                      */
   /* Typ can be: DATASET, EXCLDATA, LIBRARY or EXCLLIBR.           */
   "ISPEXEC QLIBDEF "DDName" TYPE(TYPvar) ID(IDvar)"
   retcode = rc
   SELECT
      WHEN retcode = 0 THEN DO
         SELECT  /* TYPvar                                          */
            WHEN TYPvar = 'DATASET' | TYPvar = 'EXCLDATA' THEN DO
               IDvar = translate(IDvar,' ',',')
               LD_List = IDvar
            END
            WHEN TYPvar = 'LIBRARY' | TYPvar = 'EXCLLIBR' THEN DO
               LD_List = DD_DSNs(IDvar)
            END
            OTHERWISE DO
               LD_List = ''
            END
         END    /* SELECT TYPvar                                    */
      END
      WHEN retcode = 4 THEN DO
         LD_List = ''
      END
      OTHERWISE DO
         SAY 'ERROR in QLIBDEF |'
         EXIT retcode
      END
   END     /* SELECT                                                 */
   DSN_List = DSN_List||"      "||LD_List
   DSN_List = DSN_List||"      "||DD_DSNs(DDName)
  END
  WHEN libd = 2 THEN DO
   DSN_List = ALT_DD('CLIST')
  END
  WHEN libd = 3 THEN DO
   DSN_List = ALT_DD('EXEC')
  END
  OTHERWISE DSN_List = ''
END     /* SELECT libd                                               */
RETURN DSN_List
/*********************************************************************/
/* Subroutines                                                       */
/*********************************************************************/
check_DD: PROCEDURE
/*********************************************************************/
/* check_dd                                                          */
/* Output is 1 if DD-name is LIBDEF-able, 2 if DD-name is SYSPROC,   */
/* 3 if DD-name is SYSEXEC, otherwise 0.                             */
/*********************************************************************/
ARG dd_name
ldef='ISPFILE ISPILIB ISPLLIB ISPMLIB ISPPLIB ISPSLIB ISPTABL ISPTLIB'
IF WORDPOS(dd_name,ldef) > 0 THEN ret = 1
ELSE DO
   IF dd_name = 'SYSPROC' THEN ret = 2
   ELSE DO
      IF dd_name = 'SYSEXEC' THEN ret = 3
      ELSE ret = 0
   END
END
RETURN ret
/*-------------------------------------------------------------------*/
DD_DSNs: PROCEDURE
/*********************************************************************/
/* DD_DSNs                                                           */
/* Returns the names of the under this dd-name allocated datasets    */
/* in one string.                                                    */
/*********************************************************************/
arg dd_name
msgval = MSG('OFF')
dummy = outtrap('SYSOUTLINE.',10000)
ADDRESS TSO "LISTALC STATUS"
dummy = outtrap('off')
msgval = MSG(msgval)
DSLIST= ' '
BLANK = ' '
L = 1
LINES = SYSOUTLINE.0
DO WHILE L <= LINES
   LINE = SYSOUTLINE.L
   ZW = LEFT(LINE,1)
   IF ZW = BLANK THEN DO
      DD = SUBSTR(LINE||'             ',3,8)
      DD = STRIP(DD,'B',' ')
      IF DD = dd_name THEN DO
         DA = YES
         LL = L
      END
   END
   L = L + 1
END
IF DA = YES THEN DO
   I = 0
   NDD = NO
   DO WHILE NDD = NO
      LL = LL - 1
      I = I + 1
      SAVEDSN.I = SYSOUTLINE.LL
      LL = LL + 3
      IF LL > SYSOUTLINE.0 THEN NDD = YES
      ELSE DO
         LINE = SYSOUTLINE.LL
         LINEDD = SUBSTR(LINE||'             ',3,8)
         LINEDD = LINEDD
         IF LINEDD ^= BLANK THEN NDD = YES
      END
   END
   II = 1
   DO WHILE II <= I
      DSNAME = SAVEDSN.II
      DSNAME = "'"||DSNAME||"'"
      DSLIST = DSLIST||"      "||DSNAME
      II = II + 1
   END
END
ELSE DO
   DSLIST = ""
END
RETURN DSLIST
/*-------------------------------------------------------------------*/
ALT_DD:
ARG typ
dummy = outtrap('LINES.',10000)
address "TSO"
"ALTLIB DISPLAY"
dummy = outtrap('off')
ausgabe = ''
alt_typ = ''
DO i=1 TO LINES.0
   IF LEFT(LINES.i,3) = 'IKJ' THEN DO
      PARSE VAR LINES.i msg d1 d2 .
      if d1 = 'Stacked' then do
         if typ = alt_typ then do
            PARSE VAR LINES.i d1 '=' ddn .
            ausgabe = ausgabe||' '||DD_DSNs(ddn)
         end
      end
      else alt_typ = d2
      IF POS(typ,LINES.i) > 0 THEN DO
         PARSE VAR LINES.i d1 '=' ddn .
         ausgabe = ausgabe||' '||DD_DSNs(ddn)
      END
   END
   ELSE DO
      PARSE VAR LINES.i d1 d2 .
      if d1 = 'Stacked' then do
         if typ = alt_typ then do
            PARSE VAR LINES.i d1 '=' ddn .
            ausgabe = ausgabe||' '||DD_DSNs(ddn)
         end
      end
      else alt_typ = d2
      IF POS(typ,LINES.i) > 0 THEN DO
         PARSE VAR LINES.i d1 '=' ddn .
         ausgabe = ausgabe||' '||DD_DSNs(ddn)
      END
   END
END
RETURN ausgabe
/*
Output from ALTLIB DISPLAY:
IKJ79322I Current search order (by DDNAME) is:
IKJ79324I User-level CLIST        DDNAME=SYSUPROC
IKJ79326I Application-level CLIST DDNAME=SYS00094
IKJ79321I                 Stacked DDNAME=SYS00226
IKJ79327I System-level EXEC       DDNAME=SYSEXEC
IKJ79328I System-level CLIST      DDNAME=SYSPROC
*/
