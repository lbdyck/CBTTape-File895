/* REXX *************************************************************/
/********************************************************************/
/* Build list of active IMS subsystems.                             */
/* This is based on an article by                                   */
/* Antonio Luis Salcedo Freidel                                     */
/* Xephon - DB2 update #124 February 2003                           */
/* page 22ff: ISPF dialog to obtain a list of DB2 subsystems        */
/********************************************************************/
/********************************************************************/
/* Build a list of   active IMS subsystems.                         */
/********************************************************************/
Numeric Digits 256                  /* this must be at top of REXX. */
CVTADDR = Get_Stor('10'x)      /* get communications vector address */
SYSID = Strip(Get_Stor(CVTADDR,'154'x,8)) /* get MVS system id.     */
d1 = 'Active IMS Systems on 'SYSID' :'
say d1
/*------------------------------------------------------------------*/
/* Traverse the list of subsystems known to JES.                    */
/* JESCT = CVT+x'128' = Pointer to the JESCT                        */
/* JESCT points to first SSCT which chains to next SSCT             */
/*------------------------------------------------------------------*/
JCTADDR = Get_Stor(CVTADDR,'128'x)   /* JES job control table block */
SSCTADDR = Get_Stor(JCTADDR,24)      /* Address of first SSCT block */
DO WHILE C2D(SSCTADDR) <> 0
   /*---------------------------------------------------------------*/
   /* get information from the SSCT control block.                  */
   /*---------------------------------------------------------------*/
   SUBSYS = Get_Stor(SSCTADDR,'8'x)      /* get the Subsystem name. */
   ERLYADDR= Get_Stor(SSCTADDR,20)       /* get ERLY block address. */
   SSVTADDR= Get_Stor(SSCTADDR,16)       /* get SSVT block address. */
   SSU2ADDR= Get_Stor(SSCTADDR,28)       /* get SSU2 block address. */
   /*---------------------------------------------------------------*/
   /* get information from the ERLY control block.                  */
   /*---------------------------------------------------------------*/
   IF C2D(SSVTADDR)<>0 & C2D(ERLYADDR)<>0 & C2D(SSU2ADDR)=0 THEN DO
    EYEC= Get_Stor(ERLYADDR,0,4)
/*  IF C2X(EYEC) = 'F5000014' THEN DO                               */
/* PTF in IMS V14 change this to 'F5000018                          */
    IF LEFT(C2X(EYEC),6) = 'F50000' THEN DO
     ZWADDR= Get_Stor(ERLYADDR,16)
     EYEC2= Get_Stor(ZWADDR,0,4)
     IF EYEC2 = 'SSCT' THEN DO
      ZW2ADDR= Get_Stor(ZWADDR,20)
      EYEC3= Get_Stor(ZW2ADDR,0,8)
      if EYEC3 = 'SSCTEXT ' THEN DO
         naddr= Get_Stor(ZW2ADDR,16)
         neye1= Get_Stor(naddr,0,8)
         neye2= Get_Stor(naddr,40,8)
         if neye1 = 'DFSXSSCT' then do
            STCNAME = neye2
         end
         else do
            STCNAME = '        '
         end
         SSCDADDR= Get_Stor(ZW2ADDR,8)
         if C2D(SSCDADDR) = 0 then do
            NOP
         end
         else do
            /* Get information from SSCD                            */
            /* SSCD is descriped in IMS.SDFSMAC(SSCD)               */
            SSCDEYE = Get_Stor(SSCDADDR,'0'x,4)
            IMSID = Get_Stor(SSCDADDR,'1C'x,4)
            IMSS1 = Get_Stor(SSCDADDR,'10'x,1)
            IMSS2 = Get_Stor(SSCDADDR,'11'x,1)
            IMSV1 = Get_Stor(SSCDADDR,'14'x,1)
            IMSV2 = Get_Stor(SSCDADDR,'15'x,1)
            IMSF1 = Get_Stor(SSCDADDR,'30'x,1)
            IMSF2 = Get_Stor(SSCDADDR,'31'x,1)
            IMSF3 = Get_Stor(SSCDADDR,'32'x,1)
            IMSF4 = Get_Stor(SSCDADDR,'33'x,1)
            IF SSCDEYE = 'SSCD' THEN DO
               d1 = 'SubSysID: '||SUBSYS||'  hex: '||C2X(SUBSYS)
               say d1
               d1 = ' STCname: '||STCNAME
               SAY d1
               imsver = C2X(IMSV1)'.'C2X(IMSV2)
               crc = IMSS2
               i_ss = C2X(IMSS1)
               i_f1 = C2X(IMSF1)
               i_f2 = C2X(IMSF2)
               i_f3 = C2X(IMSF3)
               i_f4 = C2X(IMSF4)
               SELECT
                WHEN BITAND(X2B(i_ss),X2B('80'))='10000000' THEN DO
                   ss1 = 'DBCTL SUBSYSTEM '
                END
                WHEN BITAND(X2B(i_ss),X2B('40'))='01000000' THEN DO
                   ss1 = 'DCCTL SUBSYSTEM '
                END
                WHEN BITAND(X2B(i_ss),X2B('20'))='00100000' THEN DO
                   ss1 = 'FDR SUBSYSTEM '
                END
                OTHERWISE ss1 = ''
               END
               SELECT
                WHEN BITAND(X2B(i_ss),X2B('08'))='00001000' THEN DO
                   ss2 = '/ DCCTL BATCH REGION'
                END
                WHEN BITAND(X2B(i_ss),X2B('04'))='00000100' THEN DO
                   ss2 = '/ CTL REGION RESTART MODE'
                END
                WHEN BITAND(X2B(i_ss),X2B('02'))='00000010' THEN DO
                   ss2 = '/ CTL REG INIT - AWAITING CMD'
                END
                WHEN BITAND(X2B(i_ss),X2B('01'))='00000001' THEN DO
                   ss2 = '/ CTL REGION INITIALIZATION MODE'
                END
                OTHERWISE ss2 = ''
               END
               SELECT
                WHEN BITAND(X2B(i_f1),X2B('0F'))='00000011' THEN DO
                   if1 = 'BATCH SYSTEM (DB) '
                END
                WHEN BITAND(X2B(i_f1),X2B('0F'))='00000000' THEN DO
                   if1 = 'ONLINE SYSTEM (DB/DC) '
                END
                OTHERWISE if1 = ''
               END
               SELECT
                WHEN BITAND(X2B(i_f1),X2B('F0'))='10000000' THEN DO
                   if1 = if1'DBRC REGION'
                END
                WHEN BITAND(X2B(i_f1),X2B('F0'))='01000000' THEN DO
                   if1 = if1'DL/I REGION'
                END
                OTHERWISE if1 = if1''
               END
               if4 = ''
               IF BITAND(X2B(i_f4),X2B('80'))='10000000' THEN DO
                   if4 = if4'IRLM PRESENT '
               END
               IF BITAND(X2B(i_f4),X2B('40'))='01000000' THEN DO
                   if4 = if4'DBRC PRESENT FOR BATCH DEFAULT '
               END
               IF BITAND(X2B(i_f4),X2B('20'))='00100000' THEN DO
                   if4 = if4'IMS/FPE INSTALLED '
               END
               IF BITAND(X2B(i_f4),X2B('10'))='00010000' THEN DO
                   if4 = if4'NO DBRC OVER RIDE ALLOWED '
               END
               IF BITAND(X2B(i_f4),X2B('08'))='00001000' THEN DO
                   if4 = if4'LOCAL STORAGE OPTION SELECTED '
               END
               IF BITAND(X2B(i_f4),X2B('04'))='00000100' THEN DO
                   if4 = if4'CROSS MEMORY LSO SELECTED '
               END
               IF BITAND(X2B(i_f4),X2B('02'))='00000010' THEN DO
                   if4 = if4'DL/I SAS SELECTED '
               END
               IF BITAND(X2B(i_f4),X2B('01'))='00000001' THEN DO
                   if4 = if4'IMS CRC REGISTRATION SUCCESS '
               END
               d1 =' IMSID: '||IMSID||' Ver: 'imsver||' CMDRecChar: '||crc
               say d1
               if if1 <> '' then do
                  d1 = ' 'if1
                  say d1
               end
               if if4 <> '' then do
                  d1 = ' 'if4
                  say d1
               end
               if ss1||ss2 <> '' then do
                  d1 = ' 'ss1||ss2
                  say d1
               end
               d1 = ' '
               say d1
            END
         end
      end
     END
    END
   END
   /*---------------------------------------------------------------*/
   /* get address of next SSCT control block in the chain.          */
   /* if the address is not zeroes, then there is another SSCT.     */
   /*---------------------------------------------------------------*/
   SSCTADDR = Get_Stor(SSCTADDR,'4'x)          /* Next one in chain */
END
exit
/* ================================================================= */
Get_Stor: PROCEDURE
/*------------------------------------------------------------------*/
/* This procedure will extract data using the MVS Storage           */
/* REXX function. Input arguments will be:                          */
/* 1) Storage_Pointer or Literal, ie CVTPTR or '10'x, or 16 (like   */
/*    '10'x)                                                        */
/* 2) Offset in hex or dec (number), ie 'FF'x or 256 or D2C(256)    */
/* 3) Length of returned data in decimal, ie 256                    */
/* NOTE รป ensure that a 'NUMERIC DIGITS 256' is at                  */
/* the beginning of the calling REXX program.                       */
/*------------------------------------------------------------------*/
Parse Arg AREA,OFFSET,LENG
If Arg(2,'O') Then OFFSET=0
If Arg(3,'O') Then LENG=4
If DataType(AREA) = 'CHAR' Then AREA = C2D(AREA)
If DataType(OFFSET) = 'CHAR' Then OFFSET = C2D(OFFSET)
Return Storage((D2X(AREA+OFFSET)),LENG)
/* ================================================================= */
