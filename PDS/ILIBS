/* REXX */
/*********************************************************************/
/*    SHOW current libs for the ISPF DD-names.                       */
/*********************************************************************/
frog = "FROG1"
address "TSO"
"ALLOC DD("frog") UNIT(VIO) DSORG(PS) LRECL(80) BLKSIZE(644)",
              "SPACE(10,1) TRACKS  RECFM(V,B) NEW"
d1='//* Datasets now available under the DD-Names:'
dummy2 = Sachma(frog,d1)
dummy = WUESDD('ISPPLIB')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPPLIB  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPPLIB  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('ISPMLIB')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPMLIB  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPMLIB  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('ISPSLIB')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPSLIB  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPSLIB  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('ISPTLIB')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPTLIB  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPTLIB  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('ISPLLIB')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPLLIB  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPLLIB  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('ISPTABL')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//ISPTABL  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//ISPTABL  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('SYSPROC')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//SYSPROC  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//SYSPROC  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
dummy = WUESDD('SYSEXEC')
IF WORDS(dummy) > 0 THEN DO
 j = WORDS(dummy)
 d1='//SYSEXEC  DD DISP=SHR,DSN='||STRIP(WORD(dummy,1),"B","'")
 dummy2 = Sachma(frog,d1)
 i = 1
 DO WHILE i < j
  i = i + 1
  d1='//         DD DISP=SHR,DSN='||STRIP(WORD(dummy,i),"B","'")
  dummy2 = Sachma(frog,d1)
 END
END
ELSE DO
 d1='//SYSEXEC  DD DUMMY'
 dummy2 = Sachma(frog,d1)
END
"EXECIO 0 DISKW "frog" (FINIS"
"ISPEXEC  LMINIT DATAID(ID) DDNAME("frog")"
"ISPEXEC  EDIT DATAID("ID")"
"FREE DD("frog")"
EXIT
/* ================================================================= */
/*-------------------------------------------------------------------*/
/* Sachma - Write in dataset                                         */
/*-------------------------------------------------------------------*/
Sachma: PROCEDURE
parse arg dd,text
push text
Address TSO "EXECIO 1 DISKW" DD "("
iorec = rc
RETURN iorec
/* ================================================================= */
/*********************************************************************/
/* WUESDD                                                            */
/* DESCRIPTION:                                                      */
/*    Function to return the current available datasets under the    */
/*    given DD-name, incl. LIBDEFed datasets.                        */
/* AUTHOR : R. Nowak                                                 */
/*********************************************************************/
WUESDD: PROCEDURE
ARG DDName
IF DDName = '' THEN DO
   SAY 'Wrong call of WUESDD. DD='DDName
   EXIT 8
END
libd = check_DD(DDName)
/* if libd = 1 (ddname is libdef-able) then user-dd has to be searched
first, then libdef and at last the dd allocation, else only dd
allocation has to be searched.                                       */
SELECT  /* libd                                                      */
  WHEN libd = 0 THEN DO
   DSN_List = DD_DSNs(DDName)
  END
  WHEN libd = 1 THEN DO
   SELECT
      WHEN DDName = 'ISPFILE' THEN usrdd = 'ISPFILU'
      WHEN DDName = 'ISPTABL' THEN usrdd = 'ISPTABU'
      OTHERWISE DO
         usrdd = LEFT(DDName,4)||'USR'
      END
   END    /* SELECT                                                 */
   DSN_List = DD_DSNs(usrdd)
   TYPvar = ''
   IDvar = ''
   /* QLIBDEF get RC=0 if LIBDEF-datsets exist and are stored in    */
   /* var ID, RC=4 : no LIBDEF                                      */
   /* Typ can be: DATASET, EXCLDATA, LIBRARY or EXCLLIBR.           */
   "ISPEXEC QLIBDEF "DDName" TYPE(TYPvar) ID(IDvar)"
   retcode = rc
   SELECT
      WHEN retcode = 0 THEN DO
         SELECT  /* TYPvar                                          */
            WHEN TYPvar = 'DATASET' | TYPvar = 'EXCLDATA' THEN DO
               IDvar = translate(IDvar,' ',',')
               LD_List = IDvar
            END
            WHEN TYPvar = 'LIBRARY' | TYPvar = 'EXCLLIBR' THEN DO
               LD_List = DD_DSNs(IDvar)
            END
            OTHERWISE DO
               LD_List = ''
            END
         END    /* SELECT TYPvar                                    */
      END
      WHEN retcode = 4 THEN DO
         LD_List = ''
      END
      OTHERWISE DO
         SAY 'ERROR in QLIBDEF |'
         EXIT retcode
      END
   END     /* SELECT                                                 */
   DSN_List = DSN_List||"      "||LD_List
   DSN_List = DSN_List||"      "||DD_DSNs(DDName)
  END
  WHEN libd = 2 THEN DO
   DSN_List = ALT_DD('CLIST')
  END
  WHEN libd = 3 THEN DO
   DSN_List = ALT_DD('EXEC')
  END
  OTHERWISE DSN_List = ''
END     /* SELECT libd                                               */
RETURN DSN_List
/*********************************************************************/
/* Subroutines                                                       */
/*********************************************************************/
check_DD: PROCEDURE
/*********************************************************************/
/* check_dd                                                          */
/* Output is 1 if DD-name is LIBDEF-able, 2 if DD-name is SYSPROC,   */
/* 3 if DD-name is SYSEXEC, otherwise 0.                             */
/*********************************************************************/
ARG dd_name
ldef='ISPFILE ISPILIB ISPLLIB ISPMLIB ISPPLIB ISPSLIB ISPTABL ISPTLIB'
IF WORDPOS(dd_name,ldef) > 0 THEN ret = 1
ELSE DO
   IF dd_name = 'SYSPROC' THEN ret = 2
   ELSE DO
      IF dd_name = 'SYSEXEC' THEN ret = 3
      ELSE ret = 0
   END
END
RETURN ret
/*-------------------------------------------------------------------*/
DD_DSNs: PROCEDURE
/*********************************************************************/
/* DD_DSNs                                                           */
/* Returns the names of the under this dd-name allocated datasets    */
/* in one string.                                                    */
/*********************************************************************/
arg dd_name
msgval = MSG('OFF')
dummy = outtrap('SYSOUTLINE.',10000)
ADDRESS TSO "LISTALC STATUS"
dummy = outtrap('off')
msgval = MSG(msgval)
DSLIST= ' '
BLANK = ' '
L = 1
LINES = SYSOUTLINE.0
DO WHILE L <= LINES
   LINE = SYSOUTLINE.L
   ZW = LEFT(LINE,1)
   IF ZW = BLANK THEN DO
      DD = SUBSTR(LINE||'             ',3,8)
      DD = STRIP(DD,'B',' ')
      IF DD = dd_name THEN DO
         DA = YES
         LL = L
      END
   END
   L = L + 1
END
IF DA = YES THEN DO
   I = 0
   NDD = NO
   DO WHILE NDD = NO
      LL = LL - 1
      I = I + 1
      SAVEDSN.I = SYSOUTLINE.LL
      LL = LL + 3
      IF LL > SYSOUTLINE.0 THEN NDD = YES
      ELSE DO
         LINE = SYSOUTLINE.LL
         LINEDD = SUBSTR(LINE||'             ',3,8)
         LINEDD = LINEDD
         IF LINEDD ^= BLANK THEN NDD = YES
      END
   END
   II = 1
   DO WHILE II <= I
      DSNAME = SAVEDSN.II
      DSNAME = "'"||DSNAME||"'"
      DSLIST = DSLIST||"      "||DSNAME
      II = II + 1
   END
END
ELSE DO
   DSLIST = ""
END
RETURN DSLIST
/*-------------------------------------------------------------------*/
ALT_DD:
ARG typ
dummy = outtrap('LINES.',10000)
address "TSO"
"ALTLIB DISPLAY"
dummy = outtrap('off')
ausgabe = ''
alt_typ = ''
DO i=1 TO LINES.0
   IF LEFT(LINES.i,3) = 'IKJ' THEN DO
      PARSE VAR LINES.i msg d1 d2 .
      if d1 = 'Stacked' then do
         if typ = alt_typ then do
            PARSE VAR LINES.i d1 '=' ddn .
            ausgabe = ausgabe||' '||DD_DSNs(ddn)
         end
      end
      else alt_typ = d2
      IF POS(typ,LINES.i) > 0 THEN DO
         PARSE VAR LINES.i d1 '=' ddn .
         ausgabe = ausgabe||' '||DD_DSNs(ddn)
      END
   END
   ELSE DO
      PARSE VAR LINES.i d1 d2 .
      if d1 = 'Stacked' then do
         if typ = alt_typ then do
            PARSE VAR LINES.i d1 '=' ddn .
            ausgabe = ausgabe||' '||DD_DSNs(ddn)
         end
      end
      else alt_typ = d2
      IF POS(typ,LINES.i) > 0 THEN DO
         PARSE VAR LINES.i d1 '=' ddn .
         ausgabe = ausgabe||' '||DD_DSNs(ddn)
      END
   END
END
RETURN ausgabe
/*
Output from ALTLIB DISPLAY:
IKJ79322I Current search order (by DDNAME) is:
IKJ79324I User-level CLIST        DDNAME=SYSUPROC
IKJ79326I Application-level CLIST DDNAME=SYS00094
IKJ79321I                 Stacked DDNAME=SYS00226
IKJ79327I System-level EXEC       DDNAME=SYSEXEC
IKJ79328I System-level CLIST      DDNAME=SYSPROC
*/
